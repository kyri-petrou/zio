"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[60499],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>h});var r=n(96540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(n),u=l,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||a;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},90341:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(58168),l=(n(96540),n(15680));const a={id:"hello-world",title:"Hello World Example",sidebar_label:"Hello World"},o=void 0,i={unversionedId:"zio-http/examples/hello-world",id:"zio-http/examples/hello-world",title:"Hello World Example",description:"Simple Example",source:"@site/docs/zio-http/examples/hello-world.md",sourceDirName:"zio-http/examples",slug:"/zio-http/examples/hello-world",permalink:"/zio-http/examples/hello-world",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/hello-world.md",tags:[],version:"current",frontMatter:{id:"hello-world",title:"Hello World Example",sidebar_label:"Hello World"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO Http",permalink:"/zio-http/"},next:{title:"HTTP Client-Server",permalink:"/zio-http/examples/http-client-server"}},p={},s=[{value:"Simple Example",id:"simple-example",level:2},{value:"Advanced Example",id:"advanced-example",level:2},{value:"Advanced with CORS Example",id:"advanced-with-cors-example",level:2},{value:"Advanced with Middlewares Example",id:"advanced-with-middlewares-example",level:2}],d={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,l.yg)(c,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"simple-example"},"Simple Example"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorld.scala" showLineNumbers"',title:'"zio-http-example/src/main/scala/example/HelloWorld.scala"','showLineNumbers"':!0},'package example\n\nimport zio._\n\nimport zio.http._\n\nobject HelloWorld extends ZIOAppDefault {\n  val textRoute =\n    Method.GET / "text" -> handler(Response.text("Hello World!"))\n\n  val jsonRoute =\n    Method.GET / "json" -> handler(Response.json("""{"greetings": "Hello World!"}"""))\n\n  // Create HTTP route\n  val app = Routes(textRoute, jsonRoute).toHttpApp\n\n  // Run it like any simple app\n  override val run = Server.serve(app).provide(Server.default)\n}\n')),(0,l.yg)("h2",{id:"advanced-example"},"Advanced Example"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldAdvanced.scala" showLineNumbers"',title:'"zio-http-example/src/main/scala/example/HelloWorldAdvanced.scala"','showLineNumbers"':!0},'package example\n\nimport scala.util.Try\n\nimport zio._\n\nimport zio.http._\nimport zio.http.netty.NettyConfig\nimport zio.http.netty.NettyConfig.LeakDetectionLevel\n\nobject HelloWorldAdvanced extends ZIOAppDefault {\n  // Set a port\n  val PORT = 0\n\n  val fooBar =\n    Routes(\n      Method.GET / "foo" -> Handler.from(Response.text("bar")),\n      Method.GET / "bar" -> Handler.from(Response.text("foo")),\n    ).toHttpApp\n\n  val app = Routes(\n    Method.GET / "random" -> handler(Random.nextString(10).map(Response.text(_))),\n    Method.GET / "utc"    -> handler(Clock.currentDateTime.map(s => Response.text(s.toString))),\n  ).toHttpApp\n\n  val run = ZIOAppArgs.getArgs.flatMap { args =>\n    // Configure thread count using CLI\n    val nThreads: Int = args.headOption.flatMap(x => Try(x.toInt).toOption).getOrElse(0)\n\n    val config           = Server.Config.default\n      .port(PORT)\n    val nettyConfig      = NettyConfig.default\n      .leakDetection(LeakDetectionLevel.PARANOID)\n      .maxThreads(nThreads)\n    val configLayer      = ZLayer.succeed(config)\n    val nettyConfigLayer = ZLayer.succeed(nettyConfig)\n\n    (Server.install(fooBar ++ app).flatMap { port =>\n      Console.printLine(s"Started server on port: $port")\n    } *> ZIO.never)\n      .provide(configLayer, nettyConfigLayer, Server.customized)\n  }\n}\n')),(0,l.yg)("h2",{id:"advanced-with-cors-example"},"Advanced with CORS Example"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldWithCORS.scala" showLineNumbers"',title:'"zio-http-example/src/main/scala/example/HelloWorldWithCORS.scala"','showLineNumbers"':!0},'package example\n\nimport zio._\n\nimport zio.http.Header.{AccessControlAllowMethods, AccessControlAllowOrigin, Origin}\nimport zio.http.Middleware.{CorsConfig, cors}\nimport zio.http._\n\nobject HelloWorldWithCORS extends ZIOAppDefault {\n\n  // Create CORS configuration\n  val config: CorsConfig =\n    CorsConfig(\n      allowedOrigin = {\n        case origin @ Origin.Value(_, host, _) if host == "dev" => Some(AccessControlAllowOrigin.Specific(origin))\n        case _                                                  => None\n      },\n      allowedMethods = AccessControlAllowMethods(Method.PUT, Method.DELETE),\n    )\n\n  // Create HTTP route with CORS enabled\n  val app: HttpApp[Any] =\n    Routes(\n      Method.GET / "text" -> handler(Response.text("Hello World!")),\n      Method.GET / "json" -> handler(Response.json("""{"greetings": "Hello World!"}""")),\n    ).toHttpApp @@ cors(config)\n\n  // Run it like any simple app\n  val run =\n    Server.serve(app).provide(Server.default)\n}\n')),(0,l.yg)("h2",{id:"advanced-with-middlewares-example"},"Advanced with Middlewares Example"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldWithMiddlewares.scala" showLineNumbers"',title:'"zio-http-example/src/main/scala/example/HelloWorldWithMiddlewares.scala"','showLineNumbers"':!0},'package example\n\nimport java.util.concurrent.TimeUnit\n\nimport zio._\n\nimport zio.http._\n\nobject HelloWorldWithMiddlewares extends ZIOAppDefault {\n\n  val app: HttpApp[Any] = Routes(\n    // this will return result instantly\n    Method.GET / "text"         -> handler(ZIO.succeed(Response.text("Hello World!"))),\n    // this will return result after 5 seconds, so with 3 seconds timeout it will fail\n    Method.GET / "long-running" -> handler(ZIO.succeed(Response.text("Hello World!")).delay(5 seconds)),\n  ).toHttpApp\n\n  val serverTime = Middleware.patchZIO(_ =>\n    for {\n      currentMilliseconds <- Clock.currentTime(TimeUnit.MILLISECONDS)\n      header = Response.Patch.addHeader("X-Time", currentMilliseconds.toString)\n    } yield header,\n  )\n  val middlewares =\n    // print debug info about request and response\n    Middleware.debug ++\n      // close connection if request takes more than 3 seconds\n      Middleware.timeout(3 seconds) ++\n      // add static header\n      Middleware.addHeader("X-Environment", "Dev") ++\n      // add dynamic header\n      serverTime\n\n  // Run it like any simple app\n  val run = Server.serve(app @@ middlewares).provide(Server.default)\n}\n')))}m.isMDXComponent=!0}}]);