"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[20895],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>u});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),h=r,u=c["".concat(p,".").concat(h)]||c[h]||g[h]||i;return n?a.createElement(u,o(o({ref:t},d),{},{components:n})):a.createElement(u,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},94346:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(58168),r=(n(96540),n(15680));const i={id:"path_codec",title:"PathCodec"},o=void 0,l={unversionedId:"zio-http/dsl/path_codec",id:"zio-http/dsl/path_codec",title:"PathCodec",description:"PathCodec[A] represents a codec for paths of type A, comprising segments where each segment can be a literal, an integer, a long, a string, a UUID, or the trailing path.",source:"@site/docs/zio-http/dsl/path_codec.md",sourceDirName:"zio-http/dsl",slug:"/zio-http/dsl/path_codec",permalink:"/zio-http/dsl/path_codec",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/dsl/path_codec.md",tags:[],version:"current",frontMatter:{id:"path_codec",title:"PathCodec"},sidebar:"ecosystem-sidebar",previous:{title:"RoutePattern",permalink:"/zio-http/dsl/route_pattern"},next:{title:"Request",permalink:"/zio-http/dsl/request"}},p={},s=[{value:"Building PathCodecs",id:"building-pathcodecs",level:2},{value:"Using Value Objects with PathCodecs",id:"using-value-objects-with-pathcodecs",level:2},{value:"Trailing Path Segments",id:"trailing-path-segments",level:2}],d={toc:s},c="wrapper";function g(e){let{components:t,...n}=e;return(0,r.yg)(c,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"PathCodec[A]")," represents a codec for paths of type ",(0,r.yg)("inlineCode",{parentName:"p"},"A"),", comprising segments where each segment can be a literal, an integer, a long, a string, a UUID, or the trailing path."),(0,r.yg)("h2",{id:"building-pathcodecs"},"Building PathCodecs"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"PathCodec")," data type offers several predefined codecs for common types:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"PathCodec"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"PathCodec.bool")),(0,r.yg)("td",{parentName:"tr",align:null},"A codec for a boolean path segment.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"PathCodec.empty")),(0,r.yg)("td",{parentName:"tr",align:null},"A codec for an empty path.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"PathCodec.literal")),(0,r.yg)("td",{parentName:"tr",align:null},"A codec for a literal path segment.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"PathCodec.long")),(0,r.yg)("td",{parentName:"tr",align:null},"A codec for a long path segment.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"PathCodec.string")),(0,r.yg)("td",{parentName:"tr",align:null},"A codec for a string path segment.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"PathCodec.uuid")),(0,r.yg)("td",{parentName:"tr",align:null},"A codec for a UUID path segment.")))),(0,r.yg)("p",null,"Complex ",(0,r.yg)("inlineCode",{parentName:"p"},"PathCodecs")," can be constructed by combining them using the ",(0,r.yg)("inlineCode",{parentName:"p"},"/")," operator:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http.codec.PathCodec\nimport PathCodec._\n\nval pathCodec = empty / "users" / int("user-id") / "posts" / string("post-id")\n')),(0,r.yg)("p",null,"By combining ",(0,r.yg)("inlineCode",{parentName:"p"},"PathCodec")," values, the resulting ",(0,r.yg)("inlineCode",{parentName:"p"},"PathCodec")," type reflects the types of the path segments it matches. In the provided example, the type of ",(0,r.yg)("inlineCode",{parentName:"p"},"pathCodec")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"(Int, String)")," because it matches a path with two segments of type ",(0,r.yg)("inlineCode",{parentName:"p"},"Int")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"String"),", respectively."),(0,r.yg)("h2",{id:"using-value-objects-with-pathcodecs"},"Using Value Objects with PathCodecs"),(0,r.yg)("p",null,"Other than the common ",(0,r.yg)("inlineCode",{parentName:"p"},"PathCodec")," constructors, it's also possible to transform a ",(0,r.yg)("inlineCode",{parentName:"p"},"PathCodec")," into a more specific data type using the ",(0,r.yg)("inlineCode",{parentName:"p"},"transform")," method."),(0,r.yg)("p",null,"This becomes particularly useful when adhering to domain-driven design principles and opting for value objects instead of primitive types:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http.codec.PathCodec\nimport PathCodec._\n\ncase class UserId private(value: Int)\n\nobject UserId {\n  def apply(value: Int): UserId =\n    if (value > 0) \n      new UserId(value)\n    else \n      throw new IllegalArgumentException("User id must be positive")\n}\n\n\nval userIdPathCodec: PathCodec[UserId] = int("user-id").transform(UserId.apply)(_.value)\n')),(0,r.yg)("p",null,"This approach enables us to utilize the ",(0,r.yg)("inlineCode",{parentName:"p"},"UserId")," value object in our routes, and the ",(0,r.yg)("inlineCode",{parentName:"p"},"PathCodec")," will take care of the conversion between the path segment and the value object."),(0,r.yg)("p",null,"In the previous example, instead of throwing an exception, we can model the failure using the ",(0,r.yg)("inlineCode",{parentName:"p"},"Either")," data type and then use the ",(0,r.yg)("inlineCode",{parentName:"p"},"transformOrFailLeft")," to create a ",(0,r.yg)("inlineCode",{parentName:"p"},"PathCodec"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http.codec.PathCodec\nimport PathCodec._\n\ncase class UserId private(value: Int)\nobject UserId {\n  def apply(value: Int): Either[String, UserId] =\n    if (value > 0) \n      Right(new UserId(value))\n    else \n      Left("User id must be positive")\n}\n\nval userIdPathCodec: PathCodec[UserId] = int("user-id").transformOrFailLeft(UserId.apply)(_.value)\n')),(0,r.yg)("p",null,"Here is a list of the available transformation methods:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"trait PathCodec[A] {\n  def transform[A2](f: A => A2)(g: A2 => A): PathCodec[A2]\n  def transformOrFail[A2](f: A => Either[String, A2])(g: A2 => Either[String, A]): PathCodec[A2]\n  def transformOrFailLeft[A2](f: A => Either[String, A2])(g: A2 => A): PathCodec[A2]\n  def transformOrFailRight[A2](f: A => A2)(g: A2 => Either[String, A]): PathCodec[A2]\n}\n")),(0,r.yg)("p",null,"Here is a complete example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.Cause.{Die, Stackless}\nimport zio.http.codec.PathCodec\n\nobject Main extends ZIOAppDefault {\n\n  import zio.http.codec.PathCodec\n  import PathCodec._\n\n  case class UserId private (value: Int)\n\n  object UserId {\n    def apply(value: Int): Either[String, UserId] =\n      if (value > 0)\n        Right(new UserId(value))\n      else\n        Left("User id must be greater than zero")\n  }\n\n  val userId: PathCodec[UserId] = int("user-id").transformOrFailLeft(UserId.apply)(_.value)\n\n  val httpApp: HttpApp[Any] =\n    Routes(\n      Method.GET / "users" / userId ->\n        Handler.fromFunctionHandler[(UserId, Request)] { case (userId: UserId, request: Request) =>\n          Handler.text(userId.value.toString)\n        },\n    ).handleErrorCause { case Stackless(cause, _) =>\n      cause match {\n        case Die(value, _) =>\n          if (value.getMessage == "User id must be greater than zero")\n            Response.badRequest(value.getMessage)\n          else\n            Response.internalServerError\n      }\n    }.toHttpApp\n\n  def run = Server.serve(httpApp).provide(Server.default)\n}\n')),(0,r.yg)("h2",{id:"trailing-path-segments"},"Trailing Path Segments"),(0,r.yg)("p",null,"Sometimes, there may be a need to match a path with a trailing segment, regardless of the number of segments it contains. This is where the trailing codec comes into play:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nobject TrailingExample extends ZIOAppDefault {\n  def staticFileHandler(path: Path): Handler[Any, Throwable, Request, Response] =\n    for {\n      file <- Handler.getResourceAsFile(path.encode)\n      http <-\n        if (file.isFile)\n          Handler.fromFile(file)\n        else\n          Handler.notFound\n    } yield http\n\n  val app =\n    Routes(\n      Method.GET / "static" / trailing ->\n        Handler.fromFunctionHandler[(Path, Request)] { case (path: Path, _: Request) =>\n          staticFileHandler(path).contramap[(Path, Request)](_._2)\n        },\n    ).sandbox.toHttpApp @@ HandlerAspect.requestLogging()\n\n  val run = Server.serve(app).provide(Server.default)\n}\n')),(0,r.yg)("p",null,"In the provided example, if an incoming request matches the route pattern ",(0,r.yg)("inlineCode",{parentName:"p"},"GET /static/*"),", the ",(0,r.yg)("inlineCode",{parentName:"p"},"trailing")," codec will match the remaining path segments and bind them to the ",(0,r.yg)("inlineCode",{parentName:"p"},"Path")," type. Therefore, a request to ",(0,r.yg)("inlineCode",{parentName:"p"},"/static/foo/bar/baz.txt")," will match the route pattern, and the ",(0,r.yg)("inlineCode",{parentName:"p"},"Path")," will be ",(0,r.yg)("inlineCode",{parentName:"p"},"foo/bar/baz.txt"),"."))}g.isMDXComponent=!0}}]);